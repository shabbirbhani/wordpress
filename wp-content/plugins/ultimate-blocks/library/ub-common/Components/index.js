"use strict";var rt=Object.defineProperty;var Ce=Object.getOwnPropertySymbols;var nt=Object.prototype.hasOwnProperty,ot=Object.prototype.propertyIsEnumerable;var Re=(e,t,r)=>t in e?rt(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,ye=(e,t)=>{for(var r in t||(t={}))nt.call(t,r)&&Re(e,r,t[r]);if(Ce)for(var r of Ce(t))ot.call(t,r)&&Re(e,r,t[r]);return e};var Z=(e,t,r)=>new Promise((n,s)=>{var o=f=>{try{i(r.next(f))}catch(p){s(p)}},l=f=>{try{i(r.throw(f))}catch(p){s(p)}},i=f=>f.done?n(f.value):Promise.resolve(f.value).then(o,l);i((r=r.apply(e,t)).next())});Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const m=require("react/jsx-runtime"),P=require("react"),ne=require("@wordpress/components"),se=require("@wordpress/i18n"),fe=require("@fortawesome/fontawesome-svg-core"),le=require("../.Chunks/e2c2858e.js"),Ye=require("@fortawesome/free-solid-svg-icons"),Be=require("@fortawesome/free-brands-svg-icons"),at=require("@wordpress/block-editor"),it=require("react-dom");let ue;const st=new Uint8Array(16);function ct(){if(!ue&&(ue=typeof crypto!="undefined"&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!ue))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return ue(st)}const F=[];for(let e=0;e<256;++e)F.push((e+256).toString(16).slice(1));function ut(e,t=0){return(F[e[t+0]]+F[e[t+1]]+F[e[t+2]]+F[e[t+3]]+"-"+F[e[t+4]]+F[e[t+5]]+"-"+F[e[t+6]]+F[e[t+7]]+"-"+F[e[t+8]]+F[e[t+9]]+"-"+F[e[t+10]]+F[e[t+11]]+F[e[t+12]]+F[e[t+13]]+F[e[t+14]]+F[e[t+15]]).toLowerCase()}const lt=typeof crypto!="undefined"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto),je={randomUUID:lt};function Ie(e,t,r){if(je.randomUUID&&!t&&!e)return je.randomUUID();e=e||{};const n=e.random||(e.rng||ct)();if(n[6]=n[6]&15|64,n[8]=n[8]&63|128,t){r=r||0;for(let s=0;s<16;++s)t[r+s]=n[s];return t}return ut(n)}function ft({onChange:e,value:t}){return m.jsx("div",{className:"ultimate-blocks-icon-search-wrapper",children:m.jsx("input",{className:"ultimate-blocks-icon-search-input",type:"text",value:t,placeholder:se.__("Searchâ€¦","ub-common"),onInput:({target:r})=>e(r.value)})})}function we(e,t){const{iconName:r}=t;this.getAttributes=()=>t,this.getName=()=>r}var b={},Ae={get exports(){return b},set exports(e){b=e}},de={},dt={get exports(){return de},set exports(e){de=e}},R={};/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var ke;function pt(){if(ke)return R;ke=1;var e=typeof Symbol=="function"&&Symbol.for,t=e?Symbol.for("react.element"):60103,r=e?Symbol.for("react.portal"):60106,n=e?Symbol.for("react.fragment"):60107,s=e?Symbol.for("react.strict_mode"):60108,o=e?Symbol.for("react.profiler"):60114,l=e?Symbol.for("react.provider"):60109,i=e?Symbol.for("react.context"):60110,f=e?Symbol.for("react.async_mode"):60111,p=e?Symbol.for("react.concurrent_mode"):60111,y=e?Symbol.for("react.forward_ref"):60112,h=e?Symbol.for("react.suspense"):60113,k=e?Symbol.for("react.suspense_list"):60120,_=e?Symbol.for("react.memo"):60115,L=e?Symbol.for("react.lazy"):60116,C=e?Symbol.for("react.block"):60121,O=e?Symbol.for("react.fundamental"):60117,N=e?Symbol.for("react.responder"):60118,V=e?Symbol.for("react.scope"):60119;function q(c){if(typeof c=="object"&&c!==null){var J=c.$$typeof;switch(J){case t:switch(c=c.type,c){case f:case p:case n:case o:case s:case h:return c;default:switch(c=c&&c.$$typeof,c){case i:case y:case L:case _:case l:return c;default:return J}}case r:return J}}}function M(c){return q(c)===p}return R.AsyncMode=f,R.ConcurrentMode=p,R.ContextConsumer=i,R.ContextProvider=l,R.Element=t,R.ForwardRef=y,R.Fragment=n,R.Lazy=L,R.Memo=_,R.Portal=r,R.Profiler=o,R.StrictMode=s,R.Suspense=h,R.isAsyncMode=function(c){return M(c)||q(c)===f},R.isConcurrentMode=M,R.isContextConsumer=function(c){return q(c)===i},R.isContextProvider=function(c){return q(c)===l},R.isElement=function(c){return typeof c=="object"&&c!==null&&c.$$typeof===t},R.isForwardRef=function(c){return q(c)===y},R.isFragment=function(c){return q(c)===n},R.isLazy=function(c){return q(c)===L},R.isMemo=function(c){return q(c)===_},R.isPortal=function(c){return q(c)===r},R.isProfiler=function(c){return q(c)===o},R.isStrictMode=function(c){return q(c)===s},R.isSuspense=function(c){return q(c)===h},R.isValidElementType=function(c){return typeof c=="string"||typeof c=="function"||c===n||c===p||c===o||c===s||c===h||c===k||typeof c=="object"&&c!==null&&(c.$$typeof===L||c.$$typeof===_||c.$$typeof===l||c.$$typeof===i||c.$$typeof===y||c.$$typeof===O||c.$$typeof===N||c.$$typeof===V||c.$$typeof===C)},R.typeOf=q,R}var j={};/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Ne;function yt(){return Ne||(Ne=1,process.env.NODE_ENV!=="production"&&function(){var e=typeof Symbol=="function"&&Symbol.for,t=e?Symbol.for("react.element"):60103,r=e?Symbol.for("react.portal"):60106,n=e?Symbol.for("react.fragment"):60107,s=e?Symbol.for("react.strict_mode"):60108,o=e?Symbol.for("react.profiler"):60114,l=e?Symbol.for("react.provider"):60109,i=e?Symbol.for("react.context"):60110,f=e?Symbol.for("react.async_mode"):60111,p=e?Symbol.for("react.concurrent_mode"):60111,y=e?Symbol.for("react.forward_ref"):60112,h=e?Symbol.for("react.suspense"):60113,k=e?Symbol.for("react.suspense_list"):60120,_=e?Symbol.for("react.memo"):60115,L=e?Symbol.for("react.lazy"):60116,C=e?Symbol.for("react.block"):60121,O=e?Symbol.for("react.fundamental"):60117,N=e?Symbol.for("react.responder"):60118,V=e?Symbol.for("react.scope"):60119;function q(u){return typeof u=="string"||typeof u=="function"||u===n||u===p||u===o||u===s||u===h||u===k||typeof u=="object"&&u!==null&&(u.$$typeof===L||u.$$typeof===_||u.$$typeof===l||u.$$typeof===i||u.$$typeof===y||u.$$typeof===O||u.$$typeof===N||u.$$typeof===V||u.$$typeof===C)}function M(u){if(typeof u=="object"&&u!==null){var G=u.$$typeof;switch(G){case t:var ce=u.type;switch(ce){case f:case p:case n:case o:case s:case h:return ce;default:var _e=ce&&ce.$$typeof;switch(_e){case i:case y:case L:case _:case l:return _e;default:return G}}case r:return G}}}var c=f,J=p,ae=i,ie=l,ee=t,$=y,W=n,D=L,U=_,H=r,K=o,Y=s,z=h,X=!1;function te(u){return X||(X=!0,console.warn("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.")),a(u)||M(u)===f}function a(u){return M(u)===p}function d(u){return M(u)===i}function I(u){return M(u)===l}function S(u){return typeof u=="object"&&u!==null&&u.$$typeof===t}function v(u){return M(u)===y}function T(u){return M(u)===n}function g(u){return M(u)===L}function x(u){return M(u)===_}function E(u){return M(u)===r}function A(u){return M(u)===o}function w(u){return M(u)===s}function B(u){return M(u)===h}j.AsyncMode=c,j.ConcurrentMode=J,j.ContextConsumer=ae,j.ContextProvider=ie,j.Element=ee,j.ForwardRef=$,j.Fragment=W,j.Lazy=D,j.Memo=U,j.Portal=H,j.Profiler=K,j.StrictMode=Y,j.Suspense=z,j.isAsyncMode=te,j.isConcurrentMode=a,j.isContextConsumer=d,j.isContextProvider=I,j.isElement=S,j.isForwardRef=v,j.isFragment=T,j.isLazy=g,j.isMemo=x,j.isPortal=E,j.isProfiler=A,j.isStrictMode=w,j.isSuspense=B,j.isValidElementType=q,j.typeOf=M}()),j}var qe;function Ve(){return qe||(qe=1,function(e){process.env.NODE_ENV==="production"?e.exports=pt():e.exports=yt()}(dt)),de}/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var me,Me;function mt(){if(Me)return me;Me=1;var e=Object.getOwnPropertySymbols,t=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function n(o){if(o==null)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(o)}function s(){try{if(!Object.assign)return!1;var o=new String("abc");if(o[5]="de",Object.getOwnPropertyNames(o)[0]==="5")return!1;for(var l={},i=0;i<10;i++)l["_"+String.fromCharCode(i)]=i;var f=Object.getOwnPropertyNames(l).map(function(y){return l[y]});if(f.join("")!=="0123456789")return!1;var p={};return"abcdefghijklmnopqrst".split("").forEach(function(y){p[y]=y}),Object.keys(Object.assign({},p)).join("")==="abcdefghijklmnopqrst"}catch(y){return!1}}return me=s()?Object.assign:function(o,l){for(var i,f=n(o),p,y=1;y<arguments.length;y++){i=Object(arguments[y]);for(var h in i)t.call(i,h)&&(f[h]=i[h]);if(e){p=e(i);for(var k=0;k<p.length;k++)r.call(i,p[k])&&(f[p[k]]=i[p[k]])}}return f},me}var ve,Le;function Pe(){if(Le)return ve;Le=1;var e="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";return ve=e,ve}var be,$e;function He(){return $e||($e=1,be=Function.call.bind(Object.prototype.hasOwnProperty)),be}var he,De;function vt(){if(De)return he;De=1;var e=function(){};if(process.env.NODE_ENV!=="production"){var t=Pe(),r={},n=He();e=function(o){var l="Warning: "+o;typeof console!="undefined"&&console.error(l);try{throw new Error(l)}catch(i){}}}function s(o,l,i,f,p){if(process.env.NODE_ENV!=="production"){for(var y in o)if(n(o,y)){var h;try{if(typeof o[y]!="function"){var k=Error((f||"React class")+": "+i+" type `"+y+"` is invalid; it must be a function, usually from the `prop-types` package, but received `"+typeof o[y]+"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");throw k.name="Invariant Violation",k}h=o[y](l,y,f,i,null,t)}catch(L){h=L}if(h&&!(h instanceof Error)&&e((f||"React class")+": type specification of "+i+" `"+y+"` is invalid; the type checker function must return `null` or an `Error` but returned a "+typeof h+". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."),h instanceof Error&&!(h.message in r)){r[h.message]=!0;var _=p?p():"";e("Failed "+i+" type: "+h.message+(_!=null?_:""))}}}}return s.resetWarningCache=function(){process.env.NODE_ENV!=="production"&&(r={})},he=s,he}var ge,Fe;function bt(){if(Fe)return ge;Fe=1;var e=Ve(),t=mt(),r=Pe(),n=He(),s=vt(),o=function(){};process.env.NODE_ENV!=="production"&&(o=function(i){var f="Warning: "+i;typeof console!="undefined"&&console.error(f);try{throw new Error(f)}catch(p){}});function l(){return null}return ge=function(i,f){var p=typeof Symbol=="function"&&Symbol.iterator,y="@@iterator";function h(a){var d=a&&(p&&a[p]||a[y]);if(typeof d=="function")return d}var k="<<anonymous>>",_={array:N("array"),bigint:N("bigint"),bool:N("boolean"),func:N("function"),number:N("number"),object:N("object"),string:N("string"),symbol:N("symbol"),any:V(),arrayOf:q,element:M(),elementType:c(),instanceOf:J,node:$(),objectOf:ie,oneOf:ae,oneOfType:ee,shape:D,exact:U};function L(a,d){return a===d?a!==0||1/a===1/d:a!==a&&d!==d}function C(a,d){this.message=a,this.data=d&&typeof d=="object"?d:{},this.stack=""}C.prototype=Error.prototype;function O(a){if(process.env.NODE_ENV!=="production")var d={},I=0;function S(T,g,x,E,A,w,B){if(E=E||k,w=w||x,B!==r){if(f){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}else if(process.env.NODE_ENV!=="production"&&typeof console!="undefined"){var G=E+":"+x;!d[G]&&I<3&&(o("You are manually calling a React.PropTypes validation function for the `"+w+"` prop on `"+E+"`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."),d[G]=!0,I++)}}return g[x]==null?T?g[x]===null?new C("The "+A+" `"+w+"` is marked as required "+("in `"+E+"`, but its value is `null`.")):new C("The "+A+" `"+w+"` is marked as required in "+("`"+E+"`, but its value is `undefined`.")):null:a(g,x,E,A,w)}var v=S.bind(null,!1);return v.isRequired=S.bind(null,!0),v}function N(a){function d(I,S,v,T,g,x){var E=I[S],A=Y(E);if(A!==a){var w=z(E);return new C("Invalid "+T+" `"+g+"` of type "+("`"+w+"` supplied to `"+v+"`, expected ")+("`"+a+"`."),{expectedType:a})}return null}return O(d)}function V(){return O(l)}function q(a){function d(I,S,v,T,g){if(typeof a!="function")return new C("Property `"+g+"` of component `"+v+"` has invalid PropType notation inside arrayOf.");var x=I[S];if(!Array.isArray(x)){var E=Y(x);return new C("Invalid "+T+" `"+g+"` of type "+("`"+E+"` supplied to `"+v+"`, expected an array."))}for(var A=0;A<x.length;A++){var w=a(x,A,v,T,g+"["+A+"]",r);if(w instanceof Error)return w}return null}return O(d)}function M(){function a(d,I,S,v,T){var g=d[I];if(!i(g)){var x=Y(g);return new C("Invalid "+v+" `"+T+"` of type "+("`"+x+"` supplied to `"+S+"`, expected a single ReactElement."))}return null}return O(a)}function c(){function a(d,I,S,v,T){var g=d[I];if(!e.isValidElementType(g)){var x=Y(g);return new C("Invalid "+v+" `"+T+"` of type "+("`"+x+"` supplied to `"+S+"`, expected a single ReactElement type."))}return null}return O(a)}function J(a){function d(I,S,v,T,g){if(!(I[S]instanceof a)){var x=a.name||k,E=te(I[S]);return new C("Invalid "+T+" `"+g+"` of type "+("`"+E+"` supplied to `"+v+"`, expected ")+("instance of `"+x+"`."))}return null}return O(d)}function ae(a){if(!Array.isArray(a))return process.env.NODE_ENV!=="production"&&(arguments.length>1?o("Invalid arguments supplied to oneOf, expected an array, got "+arguments.length+" arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."):o("Invalid argument supplied to oneOf, expected an array.")),l;function d(I,S,v,T,g){for(var x=I[S],E=0;E<a.length;E++)if(L(x,a[E]))return null;var A=JSON.stringify(a,function(B,u){var G=z(u);return G==="symbol"?String(u):u});return new C("Invalid "+T+" `"+g+"` of value `"+String(x)+"` "+("supplied to `"+v+"`, expected one of "+A+"."))}return O(d)}function ie(a){function d(I,S,v,T,g){if(typeof a!="function")return new C("Property `"+g+"` of component `"+v+"` has invalid PropType notation inside objectOf.");var x=I[S],E=Y(x);if(E!=="object")return new C("Invalid "+T+" `"+g+"` of type "+("`"+E+"` supplied to `"+v+"`, expected an object."));for(var A in x)if(n(x,A)){var w=a(x,A,v,T,g+"."+A,r);if(w instanceof Error)return w}return null}return O(d)}function ee(a){if(!Array.isArray(a))return process.env.NODE_ENV!=="production"&&o("Invalid argument supplied to oneOfType, expected an instance of array."),l;for(var d=0;d<a.length;d++){var I=a[d];if(typeof I!="function")return o("Invalid argument supplied to oneOfType. Expected an array of check functions, but received "+X(I)+" at index "+d+"."),l}function S(v,T,g,x,E){for(var A=[],w=0;w<a.length;w++){var B=a[w],u=B(v,T,g,x,E,r);if(u==null)return null;u.data&&n(u.data,"expectedType")&&A.push(u.data.expectedType)}var G=A.length>0?", expected one of type ["+A.join(", ")+"]":"";return new C("Invalid "+x+" `"+E+"` supplied to "+("`"+g+"`"+G+"."))}return O(S)}function $(){function a(d,I,S,v,T){return H(d[I])?null:new C("Invalid "+v+" `"+T+"` supplied to "+("`"+S+"`, expected a ReactNode."))}return O(a)}function W(a,d,I,S,v){return new C((a||"React class")+": "+d+" type `"+I+"."+S+"` is invalid; it must be a function, usually from the `prop-types` package, but received `"+v+"`.")}function D(a){function d(I,S,v,T,g){var x=I[S],E=Y(x);if(E!=="object")return new C("Invalid "+T+" `"+g+"` of type `"+E+"` "+("supplied to `"+v+"`, expected `object`."));for(var A in a){var w=a[A];if(typeof w!="function")return W(v,T,g,A,z(w));var B=w(x,A,v,T,g+"."+A,r);if(B)return B}return null}return O(d)}function U(a){function d(I,S,v,T,g){var x=I[S],E=Y(x);if(E!=="object")return new C("Invalid "+T+" `"+g+"` of type `"+E+"` "+("supplied to `"+v+"`, expected `object`."));var A=t({},I[S],a);for(var w in A){var B=a[w];if(n(a,w)&&typeof B!="function")return W(v,T,g,w,z(B));if(!B)return new C("Invalid "+T+" `"+g+"` key `"+w+"` supplied to `"+v+"`.\nBad object: "+JSON.stringify(I[S],null,"  ")+`
Valid keys: `+JSON.stringify(Object.keys(a),null,"  "));var u=B(x,w,v,T,g+"."+w,r);if(u)return u}return null}return O(d)}function H(a){switch(typeof a){case"number":case"string":case"undefined":return!0;case"boolean":return!a;case"object":if(Array.isArray(a))return a.every(H);if(a===null||i(a))return!0;var d=h(a);if(d){var I=d.call(a),S;if(d!==a.entries){for(;!(S=I.next()).done;)if(!H(S.value))return!1}else for(;!(S=I.next()).done;){var v=S.value;if(v&&!H(v[1]))return!1}}else return!1;return!0;default:return!1}}function K(a,d){return a==="symbol"?!0:d?d["@@toStringTag"]==="Symbol"||typeof Symbol=="function"&&d instanceof Symbol:!1}function Y(a){var d=typeof a;return Array.isArray(a)?"array":a instanceof RegExp?"object":K(d,a)?"symbol":d}function z(a){if(typeof a=="undefined"||a===null)return""+a;var d=Y(a);if(d==="object"){if(a instanceof Date)return"date";if(a instanceof RegExp)return"regexp"}return d}function X(a){var d=z(a);switch(d){case"array":case"object":return"an "+d;case"boolean":case"date":case"regexp":return"a "+d;default:return d}}function te(a){return!a.constructor||!a.constructor.name?k:a.constructor.name}return _.checkPropTypes=s,_.resetWarningCache=s.resetWarningCache,_.PropTypes=_,_},ge}var Se,We;function ht(){if(We)return Se;We=1;var e=Pe();function t(){}function r(){}return r.resetWarningCache=t,Se=function(){function n(l,i,f,p,y,h){if(h!==e){var k=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw k.name="Invariant Violation",k}}n.isRequired=n;function s(){return n}var o={array:n,bigint:n,bool:n,func:n,number:n,object:n,string:n,symbol:n,any:n,arrayOf:s,element:n,elementType:n,instanceOf:s,node:n,objectOf:s,oneOf:s,oneOfType:s,shape:s,exact:s,checkPropTypes:r,resetWarningCache:t};return o.PropTypes=o,o},Se}if(process.env.NODE_ENV!=="production"){var gt=Ve(),St=!0;Ae.exports=bt()(gt.isElement,St)}else Ae.exports=ht()();function Ue(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(s){return Object.getOwnPropertyDescriptor(e,s).enumerable})),r.push.apply(r,n)}return r}function Q(e){for(var t=1;t<arguments.length;t++){var r=arguments[t]!=null?arguments[t]:{};t%2?Ue(Object(r),!0).forEach(function(n){re(e,n,r[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Ue(Object(r)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))})}return e}function pe(e){return pe=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(t){return typeof t}:function(t){return t&&typeof Symbol=="function"&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},pe(e)}function re(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function xt(e,t){if(e==null)return{};var r={},n=Object.keys(e),s,o;for(o=0;o<n.length;o++)s=n[o],!(t.indexOf(s)>=0)&&(r[s]=e[s]);return r}function It(e,t){if(e==null)return{};var r=xt(e,t),n,s;if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(s=0;s<o.length;s++)n=o[s],!(t.indexOf(n)>=0)&&Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}function Oe(e){return Ot(e)||Tt(e)||Et(e)||wt()}function Ot(e){if(Array.isArray(e))return Te(e)}function Tt(e){if(typeof Symbol!="undefined"&&e[Symbol.iterator]!=null||e["@@iterator"]!=null)return Array.from(e)}function Et(e,t){if(e){if(typeof e=="string")return Te(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);if(r==="Object"&&e.constructor&&(r=e.constructor.name),r==="Map"||r==="Set")return Array.from(e);if(r==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return Te(e,t)}}function Te(e,t){(t==null||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function wt(){throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function Pt(e){var t,r=e.beat,n=e.fade,s=e.beatFade,o=e.bounce,l=e.shake,i=e.flash,f=e.spin,p=e.spinPulse,y=e.spinReverse,h=e.pulse,k=e.fixedWidth,_=e.inverse,L=e.border,C=e.listItem,O=e.flip,N=e.size,V=e.rotation,q=e.pull,M=(t={"fa-beat":r,"fa-fade":n,"fa-beat-fade":s,"fa-bounce":o,"fa-shake":l,"fa-flash":i,"fa-spin":f,"fa-spin-reverse":y,"fa-spin-pulse":p,"fa-pulse":h,"fa-fw":k,"fa-inverse":_,"fa-border":L,"fa-li":C,"fa-flip":O===!0,"fa-flip-horizontal":O==="horizontal"||O==="both","fa-flip-vertical":O==="vertical"||O==="both"},re(t,"fa-".concat(N),typeof N!="undefined"&&N!==null),re(t,"fa-rotate-".concat(V),typeof V!="undefined"&&V!==null&&V!==0),re(t,"fa-pull-".concat(q),typeof q!="undefined"&&q!==null),re(t,"fa-swap-opacity",e.swapOpacity),t);return Object.keys(M).map(function(c){return M[c]?c:null}).filter(function(c){return c})}function _t(e){return e=e-0,e===e}function Je(e){return _t(e)?e:(e=e.replace(/[\-_\s]+(.)?/g,function(t,r){return r?r.toUpperCase():""}),e.substr(0,1).toLowerCase()+e.substr(1))}var Ct=["style"];function Rt(e){return e.charAt(0).toUpperCase()+e.slice(1)}function jt(e){return e.split(";").map(function(t){return t.trim()}).filter(function(t){return t}).reduce(function(t,r){var n=r.indexOf(":"),s=Je(r.slice(0,n)),o=r.slice(n+1).trim();return s.startsWith("webkit")?t[Rt(s)]=o:t[s]=o,t},{})}function Ge(e,t){var r=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{};if(typeof t=="string")return t;var n=(t.children||[]).map(function(f){return Ge(e,f)}),s=Object.keys(t.attributes||{}).reduce(function(f,p){var y=t.attributes[p];switch(p){case"class":f.attrs.className=y,delete t.attributes.class;break;case"style":f.attrs.style=jt(y);break;default:p.indexOf("aria-")===0||p.indexOf("data-")===0?f.attrs[p.toLowerCase()]=y:f.attrs[Je(p)]=y}return f},{attrs:{}}),o=r.style,l=o===void 0?{}:o,i=It(r,Ct);return s.attrs.style=Q(Q({},s.attrs.style),l),e.apply(void 0,[t.tag,Q(Q({},s.attrs),i)].concat(Oe(n)))}var Ke=!1;try{Ke=process.env.NODE_ENV==="production"}catch(e){}function At(){if(!Ke&&console&&typeof console.error=="function"){var e;(e=console).error.apply(e,arguments)}}function ze(e){if(e&&pe(e)==="object"&&e.prefix&&e.iconName&&e.icon)return e;if(fe.parse.icon)return fe.parse.icon(e);if(e===null)return null;if(e&&pe(e)==="object"&&e.prefix&&e.iconName)return e;if(Array.isArray(e)&&e.length===2)return{prefix:e[0],iconName:e[1]};if(typeof e=="string")return{prefix:"fas",iconName:e}}function xe(e,t){return Array.isArray(t)&&t.length>0||!Array.isArray(t)&&t?re({},e,t):{}}var oe=P.forwardRef(function(e,t){var r=e.icon,n=e.mask,s=e.symbol,o=e.className,l=e.title,i=e.titleId,f=e.maskId,p=ze(r),y=xe("classes",[].concat(Oe(Pt(e)),Oe(o.split(" ")))),h=xe("transform",typeof e.transform=="string"?fe.parse.transform(e.transform):e.transform),k=xe("mask",ze(n)),_=fe.icon(p,Q(Q(Q(Q({},y),h),k),{},{symbol:s,title:l,titleId:i,maskId:f}));if(!_)return At("Could not find icon",p),null;var L=_.abstract,C={ref:t};return Object.keys(e).forEach(function(O){oe.defaultProps.hasOwnProperty(O)||(C[O]=e[O])}),kt(L[0],C)});oe.displayName="FontAwesomeIcon";oe.propTypes={beat:b.bool,border:b.bool,beatFade:b.bool,bounce:b.bool,className:b.string,fade:b.bool,flash:b.bool,mask:b.oneOfType([b.object,b.array,b.string]),maskId:b.string,fixedWidth:b.bool,inverse:b.bool,flip:b.oneOf([!0,!1,"horizontal","vertical","both"]),icon:b.oneOfType([b.object,b.array,b.string]),listItem:b.bool,pull:b.oneOf(["right","left"]),pulse:b.bool,rotation:b.oneOf([0,90,180,270]),shake:b.bool,size:b.oneOf(["2xs","xs","sm","lg","xl","2xl","1x","2x","3x","4x","5x","6x","7x","8x","9x","10x"]),spin:b.bool,spinPulse:b.bool,spinReverse:b.bool,symbol:b.oneOfType([b.bool,b.string]),title:b.string,titleId:b.string,transform:b.oneOfType([b.string,b.object]),swapOpacity:b.bool};oe.defaultProps={border:!1,className:"",mask:null,maskId:null,fixedWidth:!1,inverse:!1,flip:!1,icon:null,listItem:!1,pull:null,pulse:!1,rotation:null,size:null,spin:!1,spinPulse:!1,spinReverse:!1,beat:!1,fade:!1,beatFade:!1,bounce:!1,shake:!1,symbol:!1,title:"",titleId:null,transform:null,swapOpacity:!1};var kt=Ge.bind(null,P.createElement);function Qe({iconObject:e,size:t="lg"}){return m.jsx("div",{className:"ultimate-blocks-icon-render",children:m.jsx(oe,{icon:e.getAttributes(),size:t})})}function Ee({targetIcon:e,isEmpty:t=!1,onClick:r}){const n=P.useRef(null),[s,o]=P.useState(!1),l=i=>f=>{f.preventDefault(),f.stopPropagation(),o(i)};return m.jsx("div",{ref:n,className:"ultimate-blocks-icon-card",onMouseEnter:l(!0),onMouseLeave:l(!1),"data-is-empty":t,onClick:i=>{i.preventDefault(),i.stopPropagation(),r(e.getName())},"data-icon":e.getName(),children:!t&&m.jsxs(P.Fragment,{children:[m.jsx(Qe,{iconObject:e}),s&&m.jsx(ne.Popover,{anchor:n.current,children:m.jsx("div",{className:"ultimate-blocks-icon-card-popover-wrap",children:e.getName()})})]})})}function Nt({targetViewpoint:e,threshold:t=1,visibleCallback:r=()=>{}}){const n=P.useRef(null);return P.useEffect(()=>{const s={root:e.current,threshold:t},o=new IntersectionObserver(r,s);return o.observe(n.current),()=>{o.disconnect()}},[]),m.jsx("div",{ref:n,className:"ultimate-blocks-intersection-observer",children:"+"})}function qt({iconList:e,onIconSelect:t,onIconClear:r,maxVisibleCards:n=30}){const s=P.useRef(null),[o,l]=P.useState(0),[i,f]=P.useState(0),[p,y]=P.useState(null),[h,k]=P.useState([]),_=()=>{const O=o*n,N=e.slice(0,O);k(N)};P.useEffect(()=>{const O=Math.ceil(e.length/n);f(O),y(Ie()),l(1),_()},[e]),P.useEffect(()=>{p!==null&&(l(o+1),_())},[p]);const L=()=>{const O=h.map(N=>m.jsx(Ee,{onClick:t,targetIcon:N},N.getName()));return m.jsxs(P.Fragment,{children:[m.jsx(Ee,{isEmpty:!0,targetIcon:new we("set_select_empty_icon",{iconName:"clear selection"}),onClick:r},"clear_selection"),O]})},C=()=>m.jsx("div",{className:"no-icon-listing",children:m.jsx("i",{children:se.__("no icon found","ultimate-blocks")})});return m.jsxs("div",{ref:s,className:"ultimate-blocks-icon-listing",children:[e.length>0?L():C(),m.jsx(Nt,{targetViewpoint:s,threshold:.5,visibleCallback:()=>{y(Ie())}})]})}function Mt({frequentList:e=[],listSize:t=4,onSelect:r}){const[n,s]=P.useState([]);return P.useEffect(()=>{const o=e.slice(0,t),l=t-o.length;for(let i=0;i<l;i++)o.push(null);s(o)},[e]),m.jsx("div",{className:"ultimate-blocks-frequent-icon-listing",children:n.map((o,l)=>m.jsx(Ee,{targetIcon:o||new we("empty",{iconName:"empty"}),isEmpty:o===null,onClick:r},l))})}function Lt({id:e,onFilterChange:t,iconList:r,onIconSelect:n,onIconClear:s,currentIconObject:o=null,frequentList:l=[]},i){return m.jsx("div",{id:e,className:"ultimate-blocks-icon-control-wrapper",children:m.jsx(ne.Dropdown,{className:"ultimate-blocks-icon-control-dropdown",renderToggle:({onToggle:f})=>m.jsx("div",{id:e,role:"button",onClick:()=>{t(""),f()},className:"ultimate-blocks-icon-control-preview-main",ref:i,children:o&&m.jsx(Qe,{iconObject:o,size:"2xl"})}),renderContent:()=>m.jsxs("div",{className:"ultimate-blocks-icon-list-wrap",children:[m.jsx(ft,{onChange:f=>le.Debouncer(()=>t(f),200,"icon-search-input")}),m.jsx(Mt,{frequentList:l,onSelect:n}),m.jsx(qt,{iconList:r,onIconSelect:n,onIconClear:s})]})})})}const $t=P.forwardRef(Lt),Dt=(e,t,r=null)=>{const n=r!==null?r:Math.ceil(Date.now()/1e3);return{name:e,count:t,selectionTime:[n]}};function Ft(e){this.sessionCacheName=e;const{models:t}=wp.api,r=l=>l.map(i=>(i.count===void 0&&(i.count=0),i)),n=()=>{const l=sessionStorage.getItem(this.sessionCacheName);if(l)try{return JSON.parse(l)}catch(i){sessionStorage.setItem(this.sessionCacheName,null)}return null},s=()=>Z(this,null,function*(){const i=yield new t.Settings().fetch();if(i&&i[this.sessionCacheName])try{return JSON.parse(i[this.sessionCacheName])}catch(f){}return[]}),o=l=>{sessionStorage.setItem(this.sessionCacheName,l)};this.getList=()=>Z(this,null,function*(){return new Promise(l=>Z(this,null,function*(){let i=[];const f=n();if(f!==null)i=r(f);else{const p=yield s();p&&(i=r(p),o(JSON.stringify(i)))}l(i)}))}),this.getListAsIconNames=()=>Z(this,null,function*(){return(yield this.getList()).map(({name:i})=>i)}),this.addFrequentIcon=l=>Z(this,null,function*(){const i=n()||[];if(l&&l!==""){const[f]=i.filter(h=>h.name===l);f?f.count=f.count?Number.parseInt(f.count,10)+1:0:i.push(Dt(l,1));const p=JSON.stringify(i);o(p),yield new t.Settings().save({[this.sessionCacheName]:p})}return i})}function Xe({label:e,id:t=null,onIconSelect:r=()=>{},selectedIcon:n=null,frequentSettingName:s="ub_icon_choices"}){const[o,l]=P.useState(t),[i,f]=P.useState([]),[p,y]=P.useState([]),[h,k]=P.useState(""),[_,L]=P.useState(n),[C,O]=P.useState([]),[N,V]=P.useState(null),q=P.useRef(null),M=P.useRef(!0),c=()=>Z(this,null,function*(){let $=N;$||($=new Ft(s),V($));let W=yield $.getList();W=W.sort((U,H)=>{const{count:K}=U,{count:Y}=H;return K>Y?-1:K<Y?1:0});const D=W.map(U=>U.name&&U.name!==""?ee(U.name):null).filter(U=>U!==null);O(D)}),J=P.useRef(!0);P.useEffect(()=>{c()},[i]),P.useEffect(()=>{r(_),J.current||N.addFrequentIcon(_).then(()=>{c()}),J.current=!1},[_]),P.useEffect(()=>{o===null&&l(Ie());let $;const W=global||self;if(W.ubIcons)$=W.ubIcons;else{const D=ye(ye({},Ye.fas),Be.fab),U=Object.keys(D).filter(z=>Object.prototype.hasOwnProperty.call(D,z)),H=U.map(z=>D[z].iconName);$=Array.from(new Set(H)).map(z=>{let X=null;return U.map(te=>{try{if(D[te].iconName===z)throw X=te,new Error("match found, stop iteration")}catch(a){}}),X}).map(z=>new we(z,D[z])),W.ubIcons=$}f([...$]),y([...$])},[]),P.useEffect(()=>{M.current||ae(h),M.current=!1},[h]);const ae=$=>{let D=$.trim().toLowerCase();D.length<3&&(D="");const U=i.filter(H=>H.getName().includes(D));y(U)},ie=()=>{const{current:$}=q;$&&$.click()},ee=$=>{if($){const[W]=i.filter(D=>D.getName()===$);if(W)return W}return null};return m.jsxs(ne.PanelRow,{className:"ultimate-blocks-icon-control-panel-row",children:[m.jsx("label",{"data-testid":"icon-control-container-label",onClick:ie,htmlFor:o,children:e}),m.jsx($t,{id:o,ref:q,onFilterChange:k,iconList:p,onIconSelect:L,onIconClear:()=>L(null),currentIconObject:ee(_),frequentList:C})]})}const Ze=e=>Object.keys(e).filter(t=>Object.prototype.hasOwnProperty.call(e,t)).map(t=>e[t]),Wt=Ze(Ye.fas),Ut=Ze(Be.fab),zt=e=>[["fas",Wt],["fab",Ut]].reduce((t,[r,n])=>(n.some(({iconName:s})=>s===e)&&(t=r),t),null);function Yt({iconName:e,size:t,isActive:r=!1}){const n=zt(e),s=()=>!n||!e||e==="",o=()=>({width:`${t}px`,height:`${t}px`});return m.jsx("div",{style:o(),"data-empty":s(),"data-ub-active":r,className:"ultimate-blocks-icon-component",children:!s()&&m.jsx(oe,{className:"ultimate-blocks-icon-component-svg-base",icon:[n,e]})})}const et=[le.IconSizeDefinition(se.__("Small","ultimate-blocks-pro"),"small",30),le.IconSizeDefinition(se.__("Medium","ultimate-blocks-pro"),"medium",50),le.IconSizeDefinition(se.__("Large","ultimate-blocks-pro"),"large",70)];function tt({size:e,fallbackSize:t=30,iconSizeDefinitions:r=et,sizeChangeCallback:n}){return m.jsx(ne.FontSizePicker,{fontSizes:r,value:e,fallbackFontSize:t,onChange:n,__nextHasNoMarginBottom:!0})}function Bt({iconName:e,size:t,panelLabel:r,iconControlLabel:n,iconSizeDefinitions:s=et,iconSelectCallback:o,sizeChangeCallback:l,fallbackSize:i=30}){return m.jsx(at.InspectorControls,{children:m.jsxs(ne.PanelBody,{title:r,children:[m.jsx(Xe,{selectedIcon:e,label:n,onIconSelect:o}),m.jsx(tt,{sizeChangeCallback:l,size:t,fallbackSize:i,iconSizeDefinitions:s})]})})}function Vt({targetQuery:e,children:t}){const r=document.querySelector(e);return r?it.createPortal(t,r):null}function Ht({children:e}){return m.jsx("div",{className:"block-editor-block-styles__variants",children:e})}function Jt({isActive:e,onClick:t,children:r}){return m.jsx(ne.Button,{className:`block-editor-block-styles__item ${e?"is-active":""}`,variant:"secondary",isActiveStyle:!0,onClick:t,children:m.jsx("span",{className:"block-editor-block-styles__item-text",children:r})})}function Gt({children:e}){return m.jsx("div",{className:"ub-overlay",children:e})}exports.BlackWhiteButton=Jt;exports.BlackWhiteButtonGroup=Ht;exports.IconControl=Xe;exports.IconPanelGroup=Bt;exports.IconSizePicker=tt;exports.Overlay=Gt;exports.PortalBase=Vt;exports.UbIconComponent=Yt;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
